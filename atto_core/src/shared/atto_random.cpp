#include "atto_random.h"

namespace atto {

    static i32 RandomNumbers[] = {
        72	,75	,35	,23 , 62,
        53	,99	,34	,26 , 69,
        84	,85	,75	,80 , 30,
        44	,39	,96	,82 , 11,
        69	,41	,52	,58 , 20,
        56	,89	,96	,95 , 63,
        33	,30	,4	,54 , 77,
        15	,89	,56	,51 , 70,
        2	,26	,3	,3 , 45,
        99	,80	,20	,61 , 45,
        51	,14	,24	,59 , 16,
        8	,37	,61	,50 , 63,
        25	,60	,73	,6 , 5 ,
        80	,35	,50	,76 , 38,
        21	,71	,11	,18 , 76,
        64	,39	,6	,69 , 98,
        35	,91	,11	,64 , 10,
        83	,2	,55	,56 , 1 ,
        81	,95	,14	,66 , 38,
        100	,96	,87	,75 , 97,
        5	,43	,46	,92 , 75,
        76	,16	,14	,63 , 26,
        95	,43	,57	,22 , 92,
        20	,7	,49	,24 , 19,
        74	,23	,99	,22 , 17,
        87	,75	,32	,25 , 18,
        82	,71	,63	,44 , 64,
        43	,93	,17	,83 , 23,
        75	,93	,59	,98 , 96,
        50	,12	,24	,69 , 31,
        8	,13	,60	,97 , 91,
        35	,49	,42	,62 , 99,
        72	,58	,45	,35 , 23,
        70	,51	,3	,73 , 41,
        10	,91	,4	,84 , 94,
        95	,57	,34	,1 , 94,
        28	,81	,55	,89 , 35,
        14	,76	,45	,97 , 82,
        78	,98	,56	,10 , 51,
        48	,30	,58	,85 , 65,
        88	,20	,30	,61 , 32,
        34	,63	,74	,26 , 30,
        49	,90	,89	,16 , 14,
        62	,73	,84	,5 , 86,
        47	,43	,57	,54 , 13,
        82	,36	,55	,10 , 5 ,
        77	,73	,52	,47 , 65,
        90	,89	,19	,42 , 38,
        54	,53	,63	,73 , 79,
        68	,88	,25	,42 , 55,
        59	,3	,5	,32 , 22,
        15	,47	,86	,86 , 67,
        66	,51	,7	,67 , 57,
        90	,25	,98	,67 , 80,
        3	,98	,7	,30 , 9 ,
        1	,4	,39	,28 , 40,
        54	,48	,50	,29 , 46,
        84	,35	,85	,2 , 12,
        35	,91	,21	,35 , 50,
        100	,57	,67	,29 , 54,
        68	,76	,74	,10 , 58,
        94	,78	,90	,61 , 27,
        88	,77	,14	,85 , 11,
        82	,43	,67	,23 , 54,
        55	,88	,52	,25 , 62,
        62	,54	,83	,63 , 67,
        48	,53	,92	,9 , 8 ,
        26	,97	,55	,53 , 35,
        11	,30	,77	,8 , 10,
        36	,70	,74	,17 , 62,
        10	,33	,40	,58 , 96,
        56	,36	,24	,56 , 93,
        62	,52	,48	,8 , 47,
        59	,55	,56	,64 , 85,
        75	,71	,31	,26 , 1 ,
        23	,81	,1	,7 , 33,
        4	,80	,49	,95 , 5 ,
        96	,32	,5	,98 , 17,
        31	,5	,32	,75 , 48,
        13	,26	,83	,83 , 81,
        11	,41	,36	,63 , 99,
        100	,54	,7	,47 , 43,
        44	,19	,12	,69 , 68,
        35	,58	,5	,14 , 91,
        36	,9	,61	,91 , 81,
        89	,50	,27	,39 , 90,
        66	,67	,53	,57 , 49,
        74	,30	,89	,18 , 68,
        15	,62	,88	,88 , 69,
        95	,40	,36	,9 , 22,
        16	,88	,27	,43 , 63,
        65	,48	,65	,22 , 35,
        60	,20	,3	,65 , 38,
        44	,8	,46	,75 , 7 ,
        97	,19	,40	,14 , 75,
        55	,88	,46	,58 , 54,
        3	,90	,53	,84 , 25,
        85	,3	,22	,25 , 88,
        53	,13	,70	,8 , 68,
        61	,84	,90	,32 , 32,
        27	,73	,27	,88 , 25,
        56	,79	,59	,49 , 20,
        40	,75	,99	,59 , 85,
        56	,93	,59	,91 , 12,
        81	,74	,65	,41 , 45,
        27	,96	,72	,9 , 98,
        88	,86	,50	,54 , 17,
        68	,95	,5	,14 , 67,
        52	,93	,60	,90 , 4 ,
        54	,2	,16	,44 , 92,
        43	,48	,80	,71 , 80,
        33	,60	,40	,54 , 11,
        19	,5	,70	,70 , 75,
        30	,13	,64	,48 , 23,
        68	,10	,86	,79 , 7 ,
        49	,15	,90	,83 , 96,
        43	,87	,16	,27 , 89,
        30	,64	,79	,14 , 68,
        19	,16	,97	,46 , 13,
        16	,56	,85	,20 , 72,
        61	,13	,90	,26 , 96,
        51	,64	,100	,5 , 11,
        5	,75	,55	,86 , 28,
        50	,88	,94	,17 , 47,
        48	,41	,90	,17 , 48,
        17	,91	,58	,27 , 91,
        69	,21	,26	,7 , 57,
        70	,54	,66	,56 , 91,
        76	,83	,33	,48 , 46,
        25	,18	,54	,17 , 7 ,
        89	,53	,65	,12 , 59,
        35	,69	,7	,71 , 33,
        95	,81	,84	,12 , 13,
        10	,84	,83	,91 , 81,
        26	,72	,7	,40 , 58,
        26	,68	,6	,86 , 29,
        40	,14	,61	,54 , 40,
        93	,13	,76	,73 , 13,
        57	,9	,99	,24 , 7 ,
        17	,3	,50	,100 , 61,
        26	,27	,77	,28 , 26,
        84	,100	,40	,92 , 9 ,
        79	,97	,67	,2 , 84,
        69	,7	,25	,36 , 18,
        76	,7	,36	,81 , 92,
        45	,75	,92	,10 , 89,
        53	,47	,54	,33 , 96,
        58	,58	,8	,56 , 65,
        24	,27	,84	,38 , 61,
        16	,75	,99	,6 , 49,
        49	,44	,30	,70 , 6 ,
        22	,18	,93	,92 , 49,
        33	,55	,3	,18 , 61,
        90	,28	,39	,18 , 45,
        16	,25	,42	,59 , 74,
        85	,17	,79	,70 , 63,
        70	,11	,17	,58 , 34,
        31	,37	,43	,50 , 56,
        81	,35	,70	,50 , 24,
        78	,96	,95	,100 , 37,
        42	,66	,80	,28 , 42,
        31	,56	,18	,34 , 82,
        47	,58	,51	,39 , 45,
        47	,75	,82	,33 , 69,
        88	,14	,25	,24 , 39,
        82	,97	,76	,90 , 7 ,
        6	,70	,13	,83 , 45,
        88	,88	,87	,54 , 47,
        51	,63	,86	,16 , 2 ,
        12	,1	,58	,19 , 30,
        28	,84	,76	,35 , 35,
        51	,20	,76	,59 , 20,
        73	,84	,84	,90 , 45,
        98	,4	,24	,61 , 48,
        3	,92	,59	,63 , 42,
        80	,18	,69	,82 , 15,
        69	,44	,25	,6 , 70,
        90	,5	,74	,14 , 92,
        13	,49	,95	,34 , 27,
        44	,64	,78	,78 , 38,
        80	,27	,42	,44 , 57,
        10	,93	,88	,35 , 47,
        10	,80	,12	,71 , 39,
        50	,41	,32	,35 , 53,
        73	,72	,6	,16 , 15,
        81	,21	,65	,72 , 61,
        67	,32	,83	,3 , 79,
        68	,95	,24	,4 , 99,
        50	,63	,57	,81 , 93,
        15	,37	,51	,40 , 27,
        12	,10	,53	,54 , 80,
        71	,79	,96	,97 , 95,
        83	,63	,51	,63 , 72,
        30	,13	,83	,90 , 84,
        9	,87	,86	,49 , 17,
        12	,100, 17 ,39 , 79,
        90	,42	,38	,56 , 83,
        28	,8	,84	,23 , 86,
        100	,14	,38	,85 , 95,
        80	,23	,69	,26 , 42,
    };

    static i32 index = 0;
    static i32 size = 1000;

    f32 Random::Float() {
        i32 r = RandomNumbers[ index ] - 1; // 0 - 100
        f32 f = ( (f32)r ) / 101.0f;
        index = ( index + 1 ) % size;
        return f;
    }

    f32 Random::Float( f32 min, f32 max ) {
        if( min == max ) return min;
        Assert( min < max );
        f32 f = Float();
        return min + f * ( max - min );
    }

    i32 Random::Int( i32 min, i32 max ) {
        Assert( min < max );
        i32 range = max - min + 1;
        i32 randomInt = static_cast<i32>( Float() * range );
        return min + randomInt;
    }

    i32 Random::Int( i32 max ) {
        return Int( 0, max );
    }

    glm::vec2 Random::Vec2( glm::vec2 min, glm::vec2 max ) {
        return glm::vec2( Random::Float( min.x, max.x ), Random::Float( min.y, max.y ) );
    }

}
